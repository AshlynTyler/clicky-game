{"version":3,"sources":["components/Icon.js","App.js","serviceWorker.js","index.js"],"names":["Icon","react_default","a","createElement","src","this","props","width","className","height","alt","name","onClick","React","Component","App","state","score","highscore","icons","picked","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","chosen","target","_this","indexOf","push","console","log","setState","_this2","id","map","icon","components_Icon","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAeeA,mLANP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAOC,KAAKC,MAAMF,IAAKG,MAAQ,QAAQC,UAAU,OAAOC,OAAS,QAAQC,IAAOL,KAAKC,MAAMK,KAAMC,QAASP,KAAKC,MAAMM,iBAPnHC,IAAMC,WC+EVC,6MA5EbC,MAAQ,CACNC,MAAO,EACPC,UAAW,EACXC,MAAOA,EACPC,OAAQ,MAGVC,QAAU,SAASC,GAIjB,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,KAGTV,QAAU,SAACkB,GACT,IAAMC,EAASD,EAAME,OAAOtB,KAEc,IAAvCuB,EAAKjB,MAAMI,OAAOc,QAAQH,IAE3BE,EAAKjB,MAAMI,OAAOe,KAAKJ,GACvBK,QAAQC,IAAIJ,EAAKjB,MAAMI,QAEvBa,EAAKjB,MAAMC,QAERgB,EAAKjB,MAAMC,MAAQgB,EAAKjB,MAAME,WAC/Be,EAAKK,SAAS,CAACpB,UAAWe,EAAKjB,MAAMC,UAMvCgB,EAAKK,SAAS,CAAClB,OAAQ,KAEvBa,EAAKK,SAAS,CAACrB,MAAO,KAGxBgB,EAAKK,SAAS,CAACnB,MAAOc,EAAKZ,QAAQF,8EAK7B,IAAAoB,EAAAlC,KACN,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBAAiBgC,GAAK,cACnCvC,EAAAC,EAAAC,cAAA,mBAAWE,KAAKW,MAAMC,OACtBhB,EAAAC,EAAAC,cAAA,uBAAeE,KAAKW,MAAME,YAG5BjB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBAAiBgC,GAAK,aAClCrB,EAAMsB,IAAK,SAAAC,GAAI,OAEdzC,EAAAC,EAAAC,cAACwC,EAAD,CAAMvC,IAAKsC,EAAKtC,IAAKoC,GAAIE,EAAKF,GAAII,IAAKF,EAAKF,GAAI7B,KAAM+B,EAAK/B,KAAM+B,KAAMA,EAAM9B,QAAS2B,EAAK3B,qBAnErFC,IAAMC,WCOJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.da774181.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Icon extends React.Component{\r\n\r\n        \r\n\r\n    \r\n    render(){\r\n        return(\r\n            <img src = {this.props.src} width = \"200px\" className=\"icon\" height = \"200px\" alt = {this.props.name} onClick={this.props.onClick}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Icon","import React from 'react';\nimport './App.css';\nimport icons from \"./icons.json\"\nimport Icon from \"./components/Icon.js\"\n\nclass App extends React.Component {\n  state = {\n    score: 0,\n    highscore: 0,\n    icons: icons,\n    picked: []\n  }\n\n  shuffle = function(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n  onClick = (event) =>{\n    const chosen = event.target.alt\n\n    if(this.state.picked.indexOf(chosen) === -1){\n\n      this.state.picked.push(chosen)\n      console.log(this.state.picked)\n\n      this.state.score++\n\n      if(this.state.score > this.state.highscore){\n        this.setState({highscore: this.state.score})\n      }\n\n      \n    }\n    else{\n      this.setState({picked: []});\n\n      this.setState({score: 0})\n    }\n\n    this.setState({icons: this.shuffle(icons)})\n  }\n\n\n\n  render(){\n    return (\n      <div>\n        <h1>Clicky Game</h1>\n\n        <div className=\"flex-container\" id = \"score-flex\">\n          <p>Score: {this.state.score}</p>\n          <p>Highscore: {this.state.highscore}</p>\n        </div>\n        \n        <div className=\"flex-container\" id = \"icon-flex\">\n          {icons.map( icon => (\n\n            <Icon src={icon.src} id={icon.id} key={icon.id} name={icon.name} icon={icon} onClick={this.onClick}/>\n          )\n           \n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}